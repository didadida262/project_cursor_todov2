/**
 * TodoItem ÁªÑ‰ª∂ - Âçï‰∏™‰ªªÂä°È°π
 */
import React from 'react';
import './TodoItem.css';

const TodoItem = ({ 
  todo, 
  onToggle, 
  onDelete, 
  loading = false 
}) => {
  const { id, title, completed, created_at } = todo;

  /**
   * Â§ÑÁêÜÂÆåÊàêÁä∂ÊÄÅÂàáÊç¢
   */
  const handleToggle = async () => {
    try {
      await onToggle(id, !completed);
    } catch (error) {
      console.error('ÂàáÊç¢‰ªªÂä°Áä∂ÊÄÅÂ§±Ë¥•:', error);
    }
  };

  /**
   * Â§ÑÁêÜÂà†Èô§‰ªªÂä°
   */
  const handleDelete = async () => {
    if (window.confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™‰ªªÂä°ÂêóÔºü')) {
      try {
        await onDelete(id);
      } catch (error) {
        console.error('Âà†Èô§‰ªªÂä°Â§±Ë¥•:', error);
      }
    }
  };

  /**
   * Ê†ºÂºèÂåñÊó•Êúü
   * @param {string} dateString - Êó•ÊúüÂ≠óÁ¨¶‰∏≤
   * @returns {string} Ê†ºÂºèÂåñÂêéÁöÑÊó•Êúü
   */
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 1) {
      return '‰ªäÂ§©';
    } else if (diffDays === 2) {
      return 'Êò®Â§©';
    } else if (diffDays <= 7) {
      return `${diffDays - 1}Â§©Ââç`;
    } else {
      return date.toLocaleDateString('zh-CN', {
        month: 'short',
        day: 'numeric'
      });
    }
  };

  return (
    <div className={`todo-item ${completed ? 'completed' : ''} ${loading ? 'loading' : ''}`}>
      <div className="todo-content">
        <div className="todo-main">
          <button
            className={`toggle-button ${completed ? 'completed' : ''}`}
            onClick={handleToggle}
            disabled={loading}
            title={completed ? 'Ê†áËÆ∞‰∏∫Êú™ÂÆåÊàê' : 'Ê†áËÆ∞‰∏∫ÂÆåÊàê'}
          >
            {completed ? '‚úì' : '‚óã'}
          </button>
          
          <div className="todo-text">
            <span className={`todo-title ${completed ? 'completed' : ''}`}>
              {title}
            </span>
            <span className="todo-date">
              {formatDate(created_at)}
            </span>
          </div>
        </div>
        
        <div className="todo-actions">
          <button
            className="delete-button"
            onClick={handleDelete}
            disabled={loading}
            title="Âà†Èô§‰ªªÂä°"
          >
            üóëÔ∏è
          </button>
        </div>
      </div>
      
      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner">‚è≥</div>
        </div>
      )}
    </div>
  );
};

export default TodoItem;

